/*

   Copyright (C) 2020-2022 Kunio Fukuchi

   This software is provided 'as-is', without any express or implied
   warranty. In no event will the authors be held liable for any damages
   arising from the use of this software.

   Permission is granted to anyone to use this software for any purpose,
   including commercial applications, and to alter it and redistribute it
   freely, subject to the following restrictions:

   1. The origin of this software must not be misrepresented; you must not
      claim that you wrote the original software. If you use this software
      in a product, an acknowledgment in the product documentation would be
      appreciated but is not required.

   2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original software.

   3. This notice may not be removed or altered from any source distribution.

   Kunio Fukuchi

 */

namespace kunif.TestEscPosUtils
{
    using kunif.EscPosUtils;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Drawing.Imaging;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Text;

    [TestClass]
    public class Encode
    {
#pragma warning disable CS8618 // Non-nullable property '<propertyname>' must contain a non-null value when exiting constructor. Consider declaring the property as nullable.
        public TestContext TestContext { get; set; }
#pragma warning restore CS8618 // Non-nullable property '<propertyname>' must contain a non-null value when exiting constructor. Consider declaring the property as nullable.

        //[TestInitialize]
        //public void SetupTest()
        //{
        //    if (!Directory.Exists(TestContext.TestResultsDirectory))
        //    {
        //        Directory.CreateDirectory(TestContext.TestResultsDirectory);
        //    }
        //}
        //private static long EscPosCompare(List<EscPosCmd> expected, List<EscPosCmd> result)
        //{
        //    long diffs = 0;
        //    if (expected.Count != result.Count)
        //    {
        //        System.Diagnostics.Trace.WriteLine("Different Record Count Expected: " + expected.Count + ",  Result: " + result.Count + "\n");
        //        diffs++;
        //    }
        //    for (int i = 0; i < expected.Count; i++)
        //    {
        //        if (expected[i].cmdtype != result[i].cmdtype)
        //        {
        //            System.Diagnostics.Trace.WriteLine("Different CmdType Expected: " + expected[i].cmdtype + ",  Result: " + result[i].cmdtype + "\n");
        //            diffs++;
        //        }
        //        if (expected[i].cmdlength != result[i].cmdlength)
        //        {
        //            System.Diagnostics.Trace.WriteLine("Different CmdLength Expected: " + expected[i].cmdlength + ",  Result: " + result[i].cmdlength + "\n");
        //            diffs++;
        //        }
        //        for (int j = 0; j < expected[i].cmdlength; j++)
        //        {
        //            if (expected[i].cmddata[j] != result[i].cmddata[j])
        //            {
        //                System.Diagnostics.Trace.WriteLine("Different CmdData Expected: " + expected[i].cmddata[j].ToString("X2") + ",  Result: " + result[i].cmddata[j].ToString("X2") + "\n");
        //                diffs++;
        //            }
        //        }
        //    }
        //    return diffs;
        //}

        //private static void DisplayList(List<EscPosCmd> escPosCmds)
        //{
        //    string result = string.Empty;

        //    foreach (EscPosCmd item in escPosCmds)
        //    {
        //        if (string.IsNullOrEmpty(item.paramdetail))
        //        {
        //            result += string.Format(CultureInfo.InvariantCulture, "<! {0}\n  | {1} !>\n", item.cmdtype.ToString(), BitConverter.ToString(item.cmddata));
        //        }
        //        else
        //        {
        //            result += string.Format(CultureInfo.InvariantCulture, "<! {0}\n  | {1}\n  # {2} !>\n", item.cmdtype.ToString(), BitConverter.ToString(item.cmddata), item.paramdetail);
        //        }
        //    }
        //    Console.Write(result);
        //}

        private static void FileOutList(List<EscPosCmd> escPosCmds, string outpath)
        {
            FileStream ostrm;
            StreamWriter writer;
            TextWriter oldOut = Console.Out;
            try
            {
                FileMode mode = File.Exists(outpath) ? FileMode.Truncate : FileMode.Create;
                ostrm = new FileStream(outpath, mode, FileAccess.Write);
                writer = new StreamWriter(ostrm);
            }
            catch (Exception e)
            {
                Console.WriteLine($"Cannot open {outpath} for writing");
                Console.WriteLine(e.Message);
                return;
            }
            Console.SetOut(writer);
            string result = string.Empty;

            foreach (EscPosCmd item in escPosCmds)
            {
                if (string.IsNullOrEmpty(item.paramdetail))
                {
                    result += string.Format(CultureInfo.InvariantCulture, "<! {0}\n  | {1} !>\n", item.cmdtype.ToString(), BitConverter.ToString(item.cmddata));
                }
                else
                {
                    result += string.Format(CultureInfo.InvariantCulture, "<! {0}\n  | {1}\n  # {2} !>\n", item.cmdtype.ToString(), BitConverter.ToString(item.cmddata), item.paramdetail);
                }
            }
            Console.Write(result);
            Console.SetOut(oldOut);
            writer.Close();
            ostrm.Close();
            Console.WriteLine("Done");
        }

        public static readonly List<EscPosCmd> simplereceiptResult = new()
        {
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscLineSpacing, new byte[] { 0x1B, 0x33, 0x12 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x11 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xC9, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xBB }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xBA, 0x20, 0x20, 0x45, 0x53, 0x43, 0x2F, 0x50, 0x4F, 0x53, 0x20, 0x20, 0xBA }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xBA, 0x20, 0x20, 0x20 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x68, 0x61, 0x6E, 0x6B, 0x20, 0x79, 0x6F, 0x75, 0x20 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x11 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x20, 0x20, 0xBA }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xC8, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xBC }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.EscSelectDefaultLineSpacing, new byte[] { 0x1B, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x04 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x45, 0x4D, 0x42, 0x45, 0x52, 0x20, 0x31, 0x2C, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x30, 0x3A, 0x33, 0x30 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedNLines, new byte[] { 0x1B, 0x64, 0x03 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x36, 0x2E, 0x37, 0x35 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x48, 0x78, 0x78, 0x78, 0x20, 0x36, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x53, 0x2D, 0x78, 0x78, 0x78, 0x20, 0x31, 0x2E, 0x37, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x01 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4F, 0x54, 0x41, 0x4C, 0x20, 0x31, 0x34, 0x2E, 0x34, 0x35 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x41, 0x49, 0x44, 0x20, 0x35, 0x30, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x33, 0x35, 0x2E, 0x35, 0x35 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.EscGeneratePulse, new byte[] { 0x1B, 0x70, 0x30, 0x02, 0x14 }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscLineSpacing, new byte[] { 0x1B, 0x33, 0x12 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x11 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xC9, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xBB }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xBA, 0x20, 0x20, 0x45, 0x53, 0x43, 0x2F, 0x50, 0x4F, 0x53, 0x20, 0x20, 0xBA }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xBA, 0x20, 0x20, 0x20 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x68, 0x61, 0x6E, 0x6B, 0x20, 0x79, 0x6F, 0x75, 0x20 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x11 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x20, 0x20, 0xBA }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0xC8, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xBC }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.EscSelectDefaultLineSpacing, new byte[] { 0x1B, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x04 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x45, 0x4D, 0x42, 0x45, 0x52, 0x20, 0x31, 0x2C, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x30, 0x3A, 0x33, 0x30 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedNLines, new byte[] { 0x1B, 0x64, 0x03 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x36, 0x2E, 0x37, 0x35 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x48, 0x78, 0x78, 0x78, 0x20, 0x36, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x53, 0x2D, 0x78, 0x78, 0x78, 0x20, 0x31, 0x2E, 0x37, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x01 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4F, 0x54, 0x41, 0x4C, 0x20, 0x31, 0x34, 0x2E, 0x34, 0x35 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x41, 0x49, 0x44, 0x20, 0x35, 0x30, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x33, 0x35, 0x2E, 0x35, 0x35 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.EscGeneratePulse, new byte[] { 0x1B, 0x70, 0x30, 0x02, 0x14 }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x00 })
        };

        [TestMethod]
        public void TestMethodSimpleReceipt()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            var EPEnc = new EscPosEncoder();
            EPEnc.Configuration(EscPosEncoder.EscPosPrinter, 1, 1, 1, 384, 1662, 437, (EscPosEncoder.InternationalCharacter)Enum.ToObject(typeof(EscPosEncoder.InternationalCharacter), 0));

            EPEnc.Initialize();
            EPEnc.LineSpacing = 18;
            EPEnc.Justification = EscPosEncoder.Alignment.Center;
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 2 };
            EPEnc.Printables("╔═══════════╗\x0a");
            EPEnc.Printables("║  ESC/POS  ║\x0a");
            EPEnc.Printables("║   ");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };
            EPEnc.Printables("Thank you ");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 2 };
            EPEnc.Printables("   ║\x0a");
            EPEnc.Printables("╚═══════════╝\x0a");

            EPEnc.DefaultLineSpacing = 30;
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 4);
            EPEnc.Printables("NOVEMBER 1, 2012 10:30");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Lines, 3);

            EPEnc.Justification = EscPosEncoder.Alignment.Left;
            EPEnc.Printables("TM-Uxxx 6.75\x0a");
            EPEnc.Printables("TM-Hxxx 6.00\x0a");
            EPEnc.Printables("PS-xxx 1.70\x0a\x0a");

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 2 };
            EPEnc.Printables("TOTAL 14.45\x0a");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };
            EPEnc.Printables("---------------------------------------\x0a");
            EPEnc.Printables("PAID 50.00\x0a");
            EPEnc.Printables("CHANGE 35.55\x0a");

            EPEnc.GeneratePule(EscPosEncoder.DrawerKick.Pin2, 2, 20);
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 0);

            //==================

            EPEnc.Initialize();
            EPEnc.LineSpacing = 18;
            EPEnc.Justification = EscPosEncoder.Alignment.Center;
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 2 };
            EPEnc.Printables("╔═══════════╗\x0a");
            EPEnc.Printables("║  ESC/POS  ║\x0a");
            EPEnc.Printables("║   ");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };
            EPEnc.Printables("Thank you ");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 2 };
            EPEnc.Printables("   ║\x0a");
            EPEnc.Printables("╚═══════════╝\x0a");

            EPEnc.DefaultLineSpacing = 30;
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 4);
            EPEnc.Printables("NOVEMBER 1, 2012 10:30");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Lines, 3);

            EPEnc.Justification = EscPosEncoder.Alignment.Left;
            EPEnc.Printables("TM-Uxxx 6.75\x0a");
            EPEnc.Printables("TM-Hxxx 6.00\x0a");
            EPEnc.Printables("PS-xxx 1.70\x0a\x0a");

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 2 };
            EPEnc.Printables("TOTAL 14.45\x0a");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };
            EPEnc.Printables("---------------------------------------\x0a");
            EPEnc.Printables("PAID 50.00\x0a");
            EPEnc.Printables("CHANGE 35.55\x0a");

            EPEnc.GeneratePule(EscPosEncoder.DrawerKick.Pin2, 2, 20);
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 0);

            //==================

            byte[] encsimplereceipt = EPEnc.CommandList.SelectMany(v => v.cmddata).ToArray<byte>();

            byte[] linqsimplereceipt = simplereceiptResult.SelectMany(v => v.cmddata).ToArray<byte>();

            var EPTkn = new EscPosTokenizer();
            List<EscPosCmd> escposlist = EPTkn.Scan(encsimplereceipt, EscPosTokenizer.EscPosPrinter);
            escposlist = EscPosDecoder.Convert(escposlist);
            //FileOutList(escposlist, $"{TestContext.TestResultsDirectory}\\EncSimpleReceipt.txt");
            FileOutList(escposlist, ".\\EncSimpleReceipt.txt");

            Assert.AreEqual(simplereceiptResult.Count, escposlist.Count);
            for (int i = 0; i < simplereceiptResult.Count; i++)
            {
                Assert.AreEqual(simplereceiptResult[i].cmdtype, escposlist[i].cmdtype);
                Assert.AreEqual(simplereceiptResult[i].cmdlength, escposlist[i].cmdlength);
                for (long j = 0; j < simplereceiptResult[i].cmdlength; j++)
                {
                    Assert.AreEqual(simplereceiptResult[i].cmddata[j], escposlist[i].cmddata[j]);
                }
            }
        }

        private static readonly EscPosEncoder.EscPosBitmap receiptlogo = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Rasters,
            width = 240,
            height = 40,
            monochrome = true,
            planeCount = 1,
            totalSize = 1201,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x01, 0xFE, 0x00, 0x3F, 0x00, 0x7C, 0x00, 0xF8, 0x3F, 0xF8, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0xFE, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x0F, 0xFF, 0x80, 0x3F, 0x00, 0x7E, 0x00, 0xF8, 0x3F, 0xFE, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x1F, 0xFC, 0x00, 0x7F, 0xFC, 0x03, 0xFF, 0x80, 0x00, 0x03,
                        0xC0, 0x00, 0x1F, 0xFF, 0x80, 0x3F, 0x00, 0x7E, 0x01, 0xF8, 0x3F, 0xFF, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x3F, 0xFE, 0x00, 0xFF, 0xFE, 0x07, 0xFF, 0xC0, 0x00, 0x03,
                        0xC0, 0x00, 0x1E, 0x07, 0x80, 0x7F, 0x80, 0x7F, 0x01, 0xF8, 0x3C, 0x1F, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x7C, 0x1F, 0x01, 0xF8, 0x3E, 0x0F, 0x83, 0xE0, 0x00, 0x03,
                        0xC0, 0x00, 0x3C, 0x00, 0x80, 0x7F, 0x80, 0x7F, 0x03, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF8, 0x0F, 0x83, 0xE0, 0x0E, 0x1F, 0x01, 0xF0, 0x00, 0x03,
                        0xC0, 0x00, 0x3C, 0x00, 0x00, 0xFF, 0xC0, 0x7F, 0x83, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x07, 0x83, 0xC0, 0x02, 0x1E, 0x00, 0xF0, 0x00, 0x03,
                        0xC0, 0x00, 0x3C, 0x00, 0x00, 0xF3, 0xC0, 0x7F, 0x87, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xF0, 0x07, 0xC7, 0xC0, 0x00, 0x3E, 0x00, 0xF8, 0x00, 0x03,
                        0xC0, 0x00, 0x3F, 0x00, 0x00, 0xF3, 0xC0, 0x7B, 0xC7, 0x78, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x00, 0x3C, 0x00, 0x78, 0x00, 0x03,
                        0xC0, 0x00, 0x1F, 0xF8, 0x01, 0xF3, 0xE0, 0x7B, 0xCF, 0x78, 0x3C, 0x0F, 0x87, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x00, 0x3C, 0x00, 0x78, 0x00, 0x03,
                        0xC0, 0x00, 0x1F, 0xFF, 0x01, 0xE1, 0xE0, 0x79, 0xEE, 0x78, 0x3C, 0x1F, 0x07, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03,
                        0xC0, 0x00, 0x07, 0xFF, 0x81, 0xE1, 0xE0, 0x79, 0xFE, 0x78, 0x3F, 0xFE, 0x07, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03,
                        0xC0, 0x00, 0x01, 0xFF, 0xC3, 0xC1, 0xF0, 0x78, 0xFC, 0x78, 0x3F, 0xFC, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x0F, 0xC3, 0xC0, 0xF0, 0x78, 0xFC, 0x78, 0x3F, 0xF0, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x1E, 0x3C, 0x00, 0x78, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x78, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xF0, 0x07, 0xC7, 0xC0, 0x1E, 0x3E, 0x00, 0xF8, 0x00, 0x03,
                        0xC0, 0x00, 0x20, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x78, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x07, 0x83, 0xC0, 0x1E, 0x1E, 0x00, 0xF0, 0x00, 0x03,
                        0xC0, 0x00, 0x38, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF8, 0x0F, 0x83, 0xE0, 0x1E, 0x1F, 0x01, 0xF0, 0x00, 0x03,
                        0xC0, 0x00, 0x3E, 0x07, 0x8F, 0x80, 0x7C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x7C, 0x1F, 0x01, 0xF8, 0x1E, 0x0F, 0x83, 0xE0, 0x00, 0x03,
                        0xC0, 0x00, 0x3F, 0xFF, 0x8F, 0x00, 0x3C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x3F, 0xFE, 0x00, 0xFF, 0xFE, 0x07, 0xFF, 0xC0, 0x00, 0x03,
                        0xC0, 0x00, 0x3F, 0xFE, 0x0F, 0x00, 0x3C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x1F, 0xFC, 0x00, 0x7F, 0xFE, 0x03, 0xFF, 0x80, 0x00, 0x03,
                        0xC0, 0x00, 0x07, 0xF8, 0x1F, 0x00, 0x3E, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x07, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0xFE, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
                    }
                }
            }
        };

        public static readonly List<EscPosCmd> logowithbarcodeResult = new()
        {
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscHorizontalTabPosition, new byte[] { 0x1B, 0x44, 0x23, 0x00 }),
            new EscPosCmd(EscPosCmdType.GsSetHorizontalVerticalMotionUnits, new byte[] { 0x1D, 0x50, 0xB4, 0xB4 }),
            new EscPosCmd(EscPosCmdType.GsDefineDownloadGraphicsDataRasterW, new byte[] { 0x1D, 0x28, 0x4C, 0xBB, 0x04, 0x30, 0x53, 0x30, 0x41, 0x31, 0x01, 0xF0, 0x00, 0x28, 0x00, 0x31, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x01, 0xFE, 0x00, 0x3F, 0x00, 0x7C, 0x00, 0xF8, 0x3F, 0xF8, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0xFE, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x0F, 0xFF, 0x80, 0x3F, 0x00, 0x7E, 0x00, 0xF8, 0x3F, 0xFE, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x1F, 0xFC, 0x00, 0x7F, 0xFC, 0x03, 0xFF, 0x80, 0x00, 0x03, 0xC0, 0x00, 0x1F, 0xFF, 0x80, 0x3F, 0x00, 0x7E, 0x01, 0xF8, 0x3F, 0xFF, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x3F, 0xFE, 0x00, 0xFF, 0xFE, 0x07, 0xFF, 0xC0, 0x00, 0x03, 0xC0, 0x00, 0x1E, 0x07, 0x80, 0x7F, 0x80, 0x7F, 0x01, 0xF8, 0x3C, 0x1F, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x7C, 0x1F, 0x01, 0xF8, 0x3E, 0x0F, 0x83, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x3C, 0x00, 0x80, 0x7F, 0x80, 0x7F, 0x03, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF8, 0x0F, 0x83, 0xE0, 0x0E, 0x1F, 0x01, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x3C, 0x00, 0x00, 0xFF, 0xC0, 0x7F, 0x83, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x07, 0x83, 0xC0, 0x02, 0x1E, 0x00, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x3C, 0x00, 0x00, 0xF3, 0xC0, 0x7F, 0x87, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xF0, 0x07, 0xC7, 0xC0, 0x00, 0x3E, 0x00, 0xF8, 0x00, 0x03, 0xC0, 0x00, 0x3F, 0x00, 0x00, 0xF3, 0xC0, 0x7B, 0xC7, 0x78, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x00, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x1F, 0xF8, 0x01, 0xF3, 0xE0, 0x7B, 0xCF, 0x78, 0x3C, 0x0F, 0x87, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x00, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x1F, 0xFF, 0x01, 0xE1, 0xE0, 0x79, 0xEE, 0x78, 0x3C, 0x1F, 0x07, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x07, 0xFF, 0x81, 0xE1, 0xE0, 0x79, 0xFE, 0x78, 0x3F, 0xFE, 0x07, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x01, 0xFF, 0xC3, 0xC1, 0xF0, 0x78, 0xFC, 0x78, 0x3F, 0xFC, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x0F, 0xC3, 0xC0, 0xF0, 0x78, 0xFC, 0x78, 0x3F, 0xF0, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x1E, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x78, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xF0, 0x07, 0xC7, 0xC0, 0x1E, 0x3E, 0x00, 0xF8, 0x00, 0x03, 0xC0, 0x00, 0x20, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x78, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x07, 0x83, 0xC0, 0x1E, 0x1E, 0x00, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x38, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF8, 0x0F, 0x83, 0xE0, 0x1E, 0x1F, 0x01, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x3E, 0x07, 0x8F, 0x80, 0x7C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x7C, 0x1F, 0x01, 0xF8, 0x1E, 0x0F, 0x83, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x3F, 0xFF, 0x8F, 0x00, 0x3C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x3F, 0xFE, 0x00, 0xFF, 0xFE, 0x07, 0xFF, 0xC0, 0x00, 0x03, 0xC0, 0x00, 0x3F, 0xFE, 0x0F, 0x00, 0x3C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x1F, 0xFC, 0x00, 0x7F, 0xFE, 0x03, 0xFF, 0x80, 0x00, 0x03, 0xC0, 0x00, 0x07, 0xF8, 0x1F, 0x00, 0x3E, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x07, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0xFE, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsPrintSpecifiedDownloadGraphicsData, new byte[] { 0x1D, 0x28, 0x4C, 0x06, 0x00, 0x30, 0x55, 0x41, 0x31, 0x01, 0x02 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x08 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x68, 0x61, 0x6E, 0x6B, 0x20, 0x79, 0x6F, 0x75 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x45, 0x4D, 0x42, 0x45, 0x52, 0x20, 0x31, 0x2C, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x35, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedNLines, new byte[] { 0x1B, 0x64, 0x03 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x48, 0x78, 0x78, 0x78 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x36, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x53, 0x2D, 0x78, 0x78, 0x78 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x31, 0x2E, 0x37, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x01 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4F, 0x54, 0x41, 0x4C }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x37, 0x2E, 0x37, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x41, 0x49, 0x44 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x31, 0x30, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x32, 0x2E, 0x33, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedNLines, new byte[] { 0x1B, 0x64, 0x03 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x31 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x3C, 0x3C, 0x20, 0x42, 0x6F, 0x6E, 0x75, 0x73, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x3A, 0x20, 0x31, 0x34, 0x20, 0x3E, 0x3E }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x23 }),
            new EscPosCmd(EscPosCmdType.GsSetBarcodeHight, new byte[] { 0x1D, 0x68, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectPrintPositionHRICharacters, new byte[] { 0x1D, 0x48, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectFontHRICharacters, new byte[] { 0x1D, 0x66, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsPrintBarcodeSpecifiedLength, new byte[] { 0x1D, 0x6B, 0x45, 0x07, 0x2A, 0x30, 0x30, 0x30, 0x31, 0x34, 0x2A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x1E }),
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscHorizontalTabPosition, new byte[] { 0x1B, 0x44, 0x23, 0x00 }),
            new EscPosCmd(EscPosCmdType.GsSetHorizontalVerticalMotionUnits, new byte[] { 0x1D, 0x50, 0xB4, 0xB4 }),
            new EscPosCmd(EscPosCmdType.GsDefineDownloadGraphicsDataRasterW, new byte[] { 0x1D, 0x28, 0x4C, 0xBB, 0x04, 0x30, 0x53, 0x30, 0x41, 0x31, 0x01, 0xF0, 0x00, 0x28, 0x00, 0x31, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x01, 0xFE, 0x00, 0x3F, 0x00, 0x7C, 0x00, 0xF8, 0x3F, 0xF8, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0xFE, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x0F, 0xFF, 0x80, 0x3F, 0x00, 0x7E, 0x00, 0xF8, 0x3F, 0xFE, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x1F, 0xFC, 0x00, 0x7F, 0xFC, 0x03, 0xFF, 0x80, 0x00, 0x03, 0xC0, 0x00, 0x1F, 0xFF, 0x80, 0x3F, 0x00, 0x7E, 0x01, 0xF8, 0x3F, 0xFF, 0x07, 0x80, 0x07, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x3F, 0xFE, 0x00, 0xFF, 0xFE, 0x07, 0xFF, 0xC0, 0x00, 0x03, 0xC0, 0x00, 0x1E, 0x07, 0x80, 0x7F, 0x80, 0x7F, 0x01, 0xF8, 0x3C, 0x1F, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x7C, 0x1F, 0x01, 0xF8, 0x3E, 0x0F, 0x83, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x3C, 0x00, 0x80, 0x7F, 0x80, 0x7F, 0x03, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF8, 0x0F, 0x83, 0xE0, 0x0E, 0x1F, 0x01, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x3C, 0x00, 0x00, 0xFF, 0xC0, 0x7F, 0x83, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x07, 0x83, 0xC0, 0x02, 0x1E, 0x00, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x3C, 0x00, 0x00, 0xF3, 0xC0, 0x7F, 0x87, 0xF8, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xF0, 0x07, 0xC7, 0xC0, 0x00, 0x3E, 0x00, 0xF8, 0x00, 0x03, 0xC0, 0x00, 0x3F, 0x00, 0x00, 0xF3, 0xC0, 0x7B, 0xC7, 0x78, 0x3C, 0x07, 0x87, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x00, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x1F, 0xF8, 0x01, 0xF3, 0xE0, 0x7B, 0xCF, 0x78, 0x3C, 0x0F, 0x87, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x00, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x1F, 0xFF, 0x01, 0xE1, 0xE0, 0x79, 0xEE, 0x78, 0x3C, 0x1F, 0x07, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x07, 0xFF, 0x81, 0xE1, 0xE0, 0x79, 0xFE, 0x78, 0x3F, 0xFE, 0x07, 0x80, 0x07, 0xFF, 0xE0, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x01, 0xFF, 0xC3, 0xC1, 0xF0, 0x78, 0xFC, 0x78, 0x3F, 0xFC, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x83, 0xFE, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x0F, 0xC3, 0xC0, 0xF0, 0x78, 0xFC, 0x78, 0x3F, 0xF0, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x03, 0xC7, 0x80, 0x1E, 0x3C, 0x00, 0x78, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x78, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x01, 0xF0, 0x07, 0xC7, 0xC0, 0x1E, 0x3E, 0x00, 0xF8, 0x00, 0x03, 0xC0, 0x00, 0x20, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x78, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x07, 0x83, 0xC0, 0x1E, 0x1E, 0x00, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x38, 0x03, 0xC7, 0xFF, 0xF8, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0xF8, 0x0F, 0x83, 0xE0, 0x1E, 0x1F, 0x01, 0xF0, 0x00, 0x03, 0xC0, 0x00, 0x3E, 0x07, 0x8F, 0x80, 0x7C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0x80, 0x07, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x7C, 0x1F, 0x01, 0xF8, 0x1E, 0x0F, 0x83, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x3F, 0xFF, 0x8F, 0x00, 0x3C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x3F, 0xFE, 0x00, 0xFF, 0xFE, 0x07, 0xFF, 0xC0, 0x00, 0x03, 0xC0, 0x00, 0x3F, 0xFE, 0x0F, 0x00, 0x3C, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x1F, 0xFC, 0x00, 0x7F, 0xFE, 0x03, 0xFF, 0x80, 0x00, 0x03, 0xC0, 0x00, 0x07, 0xF8, 0x1F, 0x00, 0x3E, 0x78, 0x00, 0x78, 0x3C, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF0, 0x00, 0xFF, 0xF8, 0x07, 0xF0, 0x00, 0x0F, 0xF0, 0x00, 0xFE, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsPrintSpecifiedDownloadGraphicsData, new byte[] { 0x1D, 0x28, 0x4C, 0x06, 0x00, 0x30, 0x55, 0x41, 0x31, 0x01, 0x02 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x08 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x68, 0x61, 0x6E, 0x6B, 0x20, 0x79, 0x6F, 0x75 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x45, 0x4D, 0x42, 0x45, 0x52, 0x20, 0x31, 0x2C, 0x20, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x35, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedNLines, new byte[] { 0x1B, 0x64, 0x03 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x48, 0x78, 0x78, 0x78 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x36, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x53, 0x2D, 0x78, 0x78, 0x78 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x31, 0x2E, 0x37, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x01 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4F, 0x54, 0x41, 0x4C }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x37, 0x2E, 0x37, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x00 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x50, 0x41, 0x49, 0x44 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x31, 0x30, 0x2E, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45 }),
            new EscPosCmd(EscPosCmdType.HorizontalTab, new byte[] { 0x09 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x32, 0x2E, 0x33, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedNLines, new byte[] { 0x1B, 0x64, 0x03 }),
            new EscPosCmd(EscPosCmdType.EscSelectJustification, new byte[] { 0x1B, 0x61, 0x31 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x3C, 0x3C, 0x20, 0x42, 0x6F, 0x6E, 0x75, 0x73, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x3A, 0x20, 0x31, 0x34, 0x20, 0x3E, 0x3E }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x23 }),
            new EscPosCmd(EscPosCmdType.GsSetBarcodeHight, new byte[] { 0x1D, 0x68, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectPrintPositionHRICharacters, new byte[] { 0x1D, 0x48, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectFontHRICharacters, new byte[] { 0x1D, 0x66, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsPrintBarcodeSpecifiedLength, new byte[] { 0x1D, 0x6B, 0x45, 0x07, 0x2A, 0x30, 0x30, 0x30, 0x31, 0x34, 0x2A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x1E })
        };

        [TestMethod]
        public void TestMethodLogoWithBarcode()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            var EPEnc = new EscPosEncoder();
            EPEnc.Configuration(EscPosEncoder.EscPosPrinter, 1, 1, 1, 384, 1662, 437, (EscPosEncoder.InternationalCharacter)Enum.ToObject(typeof(EscPosEncoder.InternationalCharacter), 0));

            EPEnc.Initialize();
            EPEnc.TabStops = new byte[] { 35 };
            EPEnc.BasicPitch = new EscPosEncoder.MotionUnits() { horizontal = 180, vertical = 180 };

            //System.Drawing.Image image = System.Drawing.Image.FromFile("ReceiptLOGO.bmp");
            //EscPosEncoder.EscPosBitmap logo = (EscPosEncoder.EscPosBitmap)EPEnc.ConvertEscPosBitmap(image, EscPosEncoder.ImageFormat.Rasters, 0, 0, EscPosEncoder.DithererType.None);
            //EPEnc.DefineGraphics(EscPosEncoder.BufferType.DownloadGraphics, logo, true, 1, 1, (byte)'A', (byte)'1');

            //using (MemoryStream ms = new MemoryStream(File.ReadAllBytes("SampleLogo.bmp")))
            //using (Bitmap bitmap = new Bitmap(ms))
            using (Bitmap bitmap = kunif.TestEscPosUtils.Properties.Resources.SampleLogo)
            {
                EscPosEncoder.EscPosBitmap logo = EscPosEncoder.ConvertEscPosBitmap(bitmap, EscPosEncoder.ImageFormat.Rasters, 0, 0, EscPosEncoder.DithererType.None);
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.DownloadGraphics, logo, true, 1, 1, (byte)'A', (byte)'1');
            }

            //EscPosEncoder.EscPosBitmap data = new EscPosEncoder.EscPosBitmap();
            //data.imageFormat = EscPosEncoder.ImageFormat.WindowsBMP;
            //data.planeCount = 1;
            //data.planes = new EscPosEncoder.Plane[] { new EscPosEncoder.Plane() { color = 0x31, data = File.ReadAllBytes("ReceiptLOGO.bmp") } };
            //data.totalSize = data.planes[0].data.Length + 1;
            //using (MemoryStream ms = new MemoryStream(data.planes[0].data))
            //using (Bitmap bitmap = new Bitmap(ms))
            //{
            //    data.width = bitmap.Width;
            //    data.height = bitmap.Height;
            //    data.monochrome = (bitmap.PixelFormat == PixelFormat.Format1bppIndexed);
            //}
            //EPEnc.DefineGraphics(EscPosEncoder.BufferType.DownloadGraphics, data, true, 1, 1, (byte)'A', (byte)'1');

            EPEnc.Justification = EscPosEncoder.Alignment.Center;

            EPEnc.PrintGraphics(EscPosEncoder.BufferType.DownloadGraphics, 1, 2, (byte)'A', (byte)'1');

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 8);
            EPEnc.Printables("Thank you\x0a");
            EPEnc.Printables("NOVEMBER 1, 2012 15:00");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Lines, 3);

            EPEnc.Justification = EscPosEncoder.Alignment.Left;
            EPEnc.Printables("TM-Hxxx\t 6.00\x0a");
            EPEnc.Printables("PS-xxx\t 1.70\x0a\x0a");

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 2 };
            EPEnc.Printables("TOTAL\t 7.70\x0a");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };
            EPEnc.Printables("---------------------------------------\x0a");
            EPEnc.Printables("PAID\t 10.00\x0a");
            EPEnc.Printables("CHANGE\t 2.30\x0a");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Lines, 3);

            EPEnc.Justification = EscPosEncoder.Alignment.Center;
            EPEnc.Printables("<< Bonus points : 14 >>");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 35);
            EPEnc.D1BarcodeHeight = 50;
            EPEnc.D1BarcodeText = EscPosEncoder.HumanReadableIndicator.Below;
            EPEnc.D1BarcodeTextFontType = EscPosEncoder.FontType.B;
            EPEnc.D1BarcodeData = new EscPosEncoder.BarcodeData() { barcodeType = EscPosEncoder.BarcodeType.CODE39, data = Encoding.ASCII.GetBytes("*00014*") };

            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 30);

            //==================

            EPEnc.Initialize();
            EPEnc.TabStops = new byte[] { 35 };
            EPEnc.BasicPitch = new EscPosEncoder.MotionUnits() { horizontal = 180, vertical = 180 };

            EPEnc.DefineGraphics(EscPosEncoder.BufferType.DownloadGraphics, receiptlogo, true, 1, 1, (byte)'A', (byte)'1');

            EPEnc.Justification = EscPosEncoder.Alignment.Center;

            EPEnc.PrintGraphics(EscPosEncoder.BufferType.DownloadGraphics, 1, 2, (byte)'A', (byte)'1');

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 8);
            EPEnc.Printables("Thank you\x0a");
            EPEnc.Printables("NOVEMBER 1, 2012 15:00");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Lines, 3);

            EPEnc.Justification = EscPosEncoder.Alignment.Left;
            EPEnc.Printables("TM-Hxxx\t 6.00\x0a");
            EPEnc.Printables("PS-xxx\t 1.70\x0a\x0a");

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 2 };
            EPEnc.Printables("TOTAL\t 7.70\x0a");
            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 1, height = 1 };
            EPEnc.Printables("---------------------------------------\x0a");
            EPEnc.Printables("PAID\t 10.00\x0a");
            EPEnc.Printables("CHANGE\t 2.30\x0a");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Lines, 3);

            EPEnc.Justification = EscPosEncoder.Alignment.Center;
            EPEnc.Printables("<< Bonus points : 14 >>");
            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 35);
            EPEnc.D1BarcodeHeight = 50;
            EPEnc.D1BarcodeText = EscPosEncoder.HumanReadableIndicator.Below;
            EPEnc.D1BarcodeTextFontType = EscPosEncoder.FontType.B;
            EPEnc.D1BarcodeData = new EscPosEncoder.BarcodeData() { barcodeType = EscPosEncoder.BarcodeType.CODE39, data = Encoding.ASCII.GetBytes("*00014*") };

            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 30);

            //==================

            byte[] enclogowithbarcode = EPEnc.CommandList.SelectMany(v => v.cmddata).ToArray<byte>();

            byte[] linqlogowithbarcode = logowithbarcodeResult.SelectMany(v => v.cmddata).ToArray<byte>();

            var EPTkn = new EscPosTokenizer();
            List<EscPosCmd> escposlist = EPTkn.Scan(enclogowithbarcode, EscPosTokenizer.EscPosPrinter);
            escposlist = EscPosDecoder.Convert(escposlist);
            //FileOutList(escposlist, $"{TestContext.TestResultsDirectory}\\LogoWithBarcode.txt");
            FileOutList(escposlist, ".\\LogoWithBarcode.txt");

            Assert.AreEqual(logowithbarcodeResult.Count, escposlist.Count);
            for (int i = 0; i < logowithbarcodeResult.Count; i++)
            {
                Assert.AreEqual(logowithbarcodeResult[i].cmdtype, escposlist[i].cmdtype);
                Assert.AreEqual(logowithbarcodeResult[i].cmdlength, escposlist[i].cmdlength);
                for (long j = 0; j < logowithbarcodeResult[i].cmdlength; j++)
                {
                    Assert.AreEqual(logowithbarcodeResult[i].cmddata[j], escposlist[i].cmddata[j]);
                }
            }
        }

        private static readonly EscPosEncoder.EscPosBitmap borderpiece = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Column08dot,
            width = 25,
            height = 8,
            monochrome = true,
            planeCount = 1,
            totalSize = 26,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0x80,0x80,0x80,0x60,0x80,0x80,0x80,0x8C,0xA5,0x51,0x4E,0x20,0x1A,0x20,0x4E,0x51,0xA5,0x8C,0x80,0x80,0x80,0x60,0x80,0x80,0x80
                    }
                }
            }
        };

        private static readonly EscPosEncoder.EscPosBitmap xmastree1 = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Column08dot,
            width = 34,
            height = 8,
            monochrome = true,
            planeCount = 1,
            totalSize = 35,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x05,0x29,0x28,0x38,0x30,0x20,0xE0,0x20,0x31,0x38,0x28,0x29,0x05,0x03,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    }
                }
            }
        };

        private static readonly EscPosEncoder.EscPosBitmap xmastree2 = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Column08dot,
            width = 34,
            height = 8,
            monochrome = true,
            planeCount = 1,
            totalSize = 35,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0x00,0x00,0x00,0x00,0x00,0x08,0x18,0x19,0x2A,0x4C,0x8C,0x80,0x02,0x47,0xE2,0x40,0x00,0x80,0xC4,0x8E,0x04,0x80,0x8C,0x4C,0x2A,0x19,0x18,0x08,0x00,0x00,0x00,0x00,0x00,0x00
                    }
                }
            }
        };

        private static readonly EscPosEncoder.EscPosBitmap xmastree3 = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Column08dot,
            width = 34,
            height = 8,
            monochrome = true,
            planeCount = 1,
            totalSize = 35,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0x00,0x00,0x00,0x40,0x40,0xC0,0xC0,0x40,0x5C,0x54,0x57,0x55,0x55,0x75,0x75,0x55,0x55,0x55,0x75,0x75,0x55,0x55,0x57,0x54,0x5C,0x40,0xC0,0xC0,0x40,0x40,0x40,0x00,0x00,0x00
                    }
                }
            }
        };

        private static readonly EscPosEncoder.EscPosBitmap xmascake1 = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Column08dot,
            width = 48,
            height = 8,
            monochrome = true,
            planeCount = 1,
            totalSize = 49,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x09,0x09,0x7D,0x7C,0x10,0x10,0x16,0x16,0x10,0x70,0xF8,0xFC,0x7E,0x3E,0x3E,0x7E,0xFE,0xFC,0x70,0x10,0x16,0x16,0x10,0x10,0x7C,0x7D,0x09,0x09,0x07,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    }
                }
            }
        };

        private static readonly EscPosEncoder.EscPosBitmap xmascake2 = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Column08dot,
            width = 48,
            height = 8,
            monochrome = true,
            planeCount = 1,
            totalSize = 49,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0x1F,0x1F,0x24,0x21,0x40,0x42,0x42,0x41,0xF1,0xF1,0x29,0x59,0x59,0x8C,0x8C,0xD4,0xD4,0xA4,0xA4,0xD4,0xD4,0x8C,0x8C,0xD4,0xD4,0xAC,0xAC,0xC4,0xC4,0xAC,0xAC,0x94,0x94,0xAC,0xAC,0x49,0x49,0x29,0xF1,0xF1,0x41,0x42,0x42,0x40,0x23,0x24,0x1F,0x1F
                    }
                }
            }
        };

        private static readonly EscPosEncoder.EscPosBitmap xmascake3 = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Column08dot,
            width = 48,
            height = 8,
            monochrome = true,
            planeCount = 1,
            totalSize = 49,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0xF0,0xF0,0x4C,0x4C,0x24,0x24,0x24,0x12,0x12,0x12,0x12,0x12,0x12,0x89,0xA9,0xA9,0x89,0x89,0x99,0x99,0x89,0x80,0x89,0xC9,0xC9,0x89,0x99,0x99,0x89,0xC9,0xC9,0x89,0xA9,0xA9,0x89,0x12,0x12,0x12,0x12,0x12,0x12,0x24,0x24,0x24,0x4C,0x4C,0xF0,0xF0
                    }
                }
            }
        };

        public static readonly List<EscPosCmd> pagemodeResult = new()
        {
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscSelectPageMode, new byte[] { 0x1B, 0x4C }),
            new EscPosCmd(EscPosCmdType.GsSetHorizontalVerticalMotionUnits, new byte[] { 0x1D, 0x50, 0xCB, 0xCB }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x06, 0x00, 0x00, 0x00, 0xF4, 0x01, 0xEE, 0x02 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x31 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x33 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x30 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x8C, 0x00, 0x76, 0x00, 0x68, 0x01, 0x10, 0x02 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x11 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x4D, 0x65, 0x72, 0x72, 0x79, 0x20, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6D, 0x61, 0x73, 0x20, 0x21, 0x21 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x31, 0x30, 0x25, 0x20, 0x4F, 0x46, 0x46, 0x20, 0x43, 0x4F, 0x55, 0x50, 0x4F, 0x4E }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0xC8 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x45, 0x53, 0x43, 0x2F, 0x50, 0x4F, 0x53, 0x20, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4D, 0x45, 0x4E, 0x54, 0x20, 0x53, 0x54, 0x4F, 0x52, 0x45 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x32, 0x00, 0x4C, 0x02, 0x48, 0x00, 0x44, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.EscLineSpacing, new byte[] { 0x1B, 0x33, 0x18 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x05, 0x29, 0x28, 0x38, 0x30, 0x20, 0xE0, 0x20, 0x31, 0x38, 0x28, 0x29, 0x05, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x19, 0x2A, 0x4C, 0x8C, 0x80, 0x02, 0x47, 0xE2, 0x40, 0x00, 0x80, 0xC4, 0x8E, 0x04, 0x80, 0x8C, 0x4C, 0x2A, 0x19, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0xC0, 0xC0, 0x40, 0x5C, 0x54, 0x57, 0x55, 0x55, 0x75, 0x75, 0x55, 0x55, 0x55, 0x75, 0x75, 0x55, 0x55, 0x57, 0x54, 0x5C, 0x40, 0xC0, 0xC0, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x3A, 0x01, 0x66, 0x00, 0x48, 0x00, 0x60, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x09, 0x09, 0x7D, 0x7C, 0x10, 0x10, 0x16, 0x16, 0x10, 0x70, 0xF8, 0xFC, 0x7E, 0x3E, 0x3E, 0x7E, 0xFE, 0xFC, 0x70, 0x10, 0x16, 0x16, 0x10, 0x10, 0x7C, 0x7D, 0x09, 0x09, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x30, 0x00, 0x1F, 0x1F, 0x24, 0x21, 0x40, 0x42, 0x42, 0x41, 0xF1, 0xF1, 0x29, 0x59, 0x59, 0x8C, 0x8C, 0xD4, 0xD4, 0xA4, 0xA4, 0xD4, 0xD4, 0x8C, 0x8C, 0xD4, 0xD4, 0xAC, 0xAC, 0xC4, 0xC4, 0xAC, 0xAC, 0x94, 0x94, 0xAC, 0xAC, 0x49, 0x49, 0x29, 0xF1, 0xF1, 0x41, 0x42, 0x42, 0x40, 0x23, 0x24, 0x1F, 0x1F }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x30, 0x00, 0xF0, 0xF0, 0x4C, 0x4C, 0x24, 0x24, 0x24, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x89, 0xA9, 0xA9, 0x89, 0x89, 0x99, 0x99, 0x89, 0x80, 0x89, 0xC9, 0xC9, 0x89, 0x99, 0x99, 0x89, 0xC9, 0xC9, 0x89, 0xA9, 0xA9, 0x89, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x24, 0x24, 0x24, 0x4C, 0x4C, 0xF0, 0xF0 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x14, 0x01, 0xE2, 0x00, 0x46, 0x00, 0x38, 0x01 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectPrintPositionHRICharacters, new byte[] { 0x1D, 0x48, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectFontHRICharacters, new byte[] { 0x1D, 0x66, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsSetBarcodeHight, new byte[] { 0x1D, 0x68, 0x28 }),
            new EscPosCmd(EscPosCmdType.GsSetBarcodeWidth, new byte[] { 0x1D, 0x77, 0x02 }),
            new EscPosCmd(EscPosCmdType.GsSetAbsoluteVerticalPrintPositionInPageMode, new byte[] { 0x1D, 0x24, 0x28, 0x00 }),
            new EscPosCmd(EscPosCmdType.GsPrintBarcodeSpecifiedLength, new byte[] { 0x1D, 0x6B, 0x45, 0x09, 0x2A, 0x31, 0x30, 0x25, 0x20, 0x4F, 0x46, 0x46, 0x2A }),
            new EscPosCmd(EscPosCmdType.EscPageModeFormFeed, new byte[] { 0x1B, 0x0C }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x50 }),
            new EscPosCmd(EscPosCmdType.EscSelectStandardMode, new byte[] { 0x1B, 0x53 }),
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscSelectPageMode, new byte[] { 0x1B, 0x4C }),
            new EscPosCmd(EscPosCmdType.GsSetHorizontalVerticalMotionUnits, new byte[] { 0x1D, 0x50, 0xCB, 0xCB }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x06, 0x00, 0x00, 0x00, 0xF4, 0x01, 0xEE, 0x02 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x31 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x33 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x30 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x19, 0x00, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80, 0x8C, 0xA5, 0x51, 0x4E, 0x20, 0x1A, 0x20, 0x4E, 0x51, 0xA5, 0x8C, 0x80, 0x80, 0x80, 0x60, 0x80, 0x80, 0x80 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x8C, 0x00, 0x76, 0x00, 0x68, 0x01, 0x10, 0x02 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x11 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x4D, 0x65, 0x72, 0x72, 0x79, 0x20, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6D, 0x61, 0x73, 0x20, 0x21, 0x21 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsSelectCharacterSize, new byte[] { 0x1D, 0x21, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x20, 0x31, 0x30, 0x25, 0x20, 0x4F, 0x46, 0x46, 0x20, 0x43, 0x4F, 0x55, 0x50, 0x4F, 0x4E }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0xC8 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x45, 0x53, 0x43, 0x2F, 0x50, 0x4F, 0x53, 0x20, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4D, 0x45, 0x4E, 0x54, 0x20, 0x53, 0x54, 0x4F, 0x52, 0x45 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x32, 0x00, 0x4C, 0x02, 0x48, 0x00, 0x44, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.EscLineSpacing, new byte[] { 0x1B, 0x33, 0x18 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x05, 0x29, 0x28, 0x38, 0x30, 0x20, 0xE0, 0x20, 0x31, 0x38, 0x28, 0x29, 0x05, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x19, 0x2A, 0x4C, 0x8C, 0x80, 0x02, 0x47, 0xE2, 0x40, 0x00, 0x80, 0xC4, 0x8E, 0x04, 0x80, 0x8C, 0x4C, 0x2A, 0x19, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0xC0, 0xC0, 0x40, 0x5C, 0x54, 0x57, 0x55, 0x55, 0x75, 0x75, 0x55, 0x55, 0x55, 0x75, 0x75, 0x55, 0x55, 0x57, 0x54, 0x5C, 0x40, 0xC0, 0xC0, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x3A, 0x01, 0x66, 0x00, 0x48, 0x00, 0x60, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x09, 0x09, 0x7D, 0x7C, 0x10, 0x10, 0x16, 0x16, 0x10, 0x70, 0xF8, 0xFC, 0x7E, 0x3E, 0x3E, 0x7E, 0xFE, 0xFC, 0x70, 0x10, 0x16, 0x16, 0x10, 0x10, 0x7C, 0x7D, 0x09, 0x09, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x30, 0x00, 0x1F, 0x1F, 0x24, 0x21, 0x40, 0x42, 0x42, 0x41, 0xF1, 0xF1, 0x29, 0x59, 0x59, 0x8C, 0x8C, 0xD4, 0xD4, 0xA4, 0xA4, 0xD4, 0xD4, 0x8C, 0x8C, 0xD4, 0xD4, 0xAC, 0xAC, 0xC4, 0xC4, 0xAC, 0xAC, 0x94, 0x94, 0xAC, 0xAC, 0x49, 0x49, 0x29, 0xF1, 0xF1, 0x41, 0x42, 0x42, 0x40, 0x23, 0x24, 0x1F, 0x1F }),
            new EscPosCmd(EscPosCmdType.EscSelectBitImageMode, new byte[] { 0x1B, 0x2A, 0x00, 0x30, 0x00, 0xF0, 0xF0, 0x4C, 0x4C, 0x24, 0x24, 0x24, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x89, 0xA9, 0xA9, 0x89, 0x89, 0x99, 0x99, 0x89, 0x80, 0x89, 0xC9, 0xC9, 0x89, 0x99, 0x99, 0x89, 0xC9, 0xC9, 0x89, 0xA9, 0xA9, 0x89, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x24, 0x24, 0x24, 0x4C, 0x4C, 0xF0, 0xF0 }),
            new EscPosCmd(EscPosCmdType.EscSetPrintAreaInPageMode, new byte[] { 0x1B, 0x57, 0x14, 0x01, 0xE2, 0x00, 0x46, 0x00, 0x38, 0x01 }),
            new EscPosCmd(EscPosCmdType.EscSelectPrintDirection, new byte[] { 0x1B, 0x54, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectPrintPositionHRICharacters, new byte[] { 0x1D, 0x48, 0x32 }),
            new EscPosCmd(EscPosCmdType.GsSelectFontHRICharacters, new byte[] { 0x1D, 0x66, 0x31 }),
            new EscPosCmd(EscPosCmdType.GsSetBarcodeHight, new byte[] { 0x1D, 0x68, 0x28 }),
            new EscPosCmd(EscPosCmdType.GsSetBarcodeWidth, new byte[] { 0x1D, 0x77, 0x02 }),
            new EscPosCmd(EscPosCmdType.GsSetAbsoluteVerticalPrintPositionInPageMode, new byte[] { 0x1D, 0x24, 0x28, 0x00 }),
            new EscPosCmd(EscPosCmdType.GsPrintBarcodeSpecifiedLength, new byte[] { 0x1D, 0x6B, 0x45, 0x09, 0x2A, 0x31, 0x30, 0x25, 0x20, 0x4F, 0x46, 0x46, 0x2A }),
            new EscPosCmd(EscPosCmdType.EscPageModeFormFeed, new byte[] { 0x1B, 0x0C }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x50 }),
            new EscPosCmd(EscPosCmdType.EscSelectStandardMode, new byte[] { 0x1B, 0x53 })
        };

        [TestMethod]
        public void TestMethodPageMode()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            var EPEnc = new EscPosEncoder();
            EPEnc.Configuration(EscPosEncoder.EscPosPrinter, 1, 1, 1, 384, 1662, 437, (EscPosEncoder.InternationalCharacter)Enum.ToObject(typeof(EscPosEncoder.InternationalCharacter), 0));

            EPEnc.Initialize();
            EPEnc.PageMode = true;
            EPEnc.BasicPitch = new EscPosEncoder.MotionUnits() { horizontal = 203, vertical = 203 };

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 6, Y = 0, Width = 500, Height = 750 };

            EPEnc.PageDirection = EscPosEncoder.Direction.LeftToRight;
            for (int i = 0; i < 10; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;
            for (int i = 0; i < 15; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageDirection = EscPosEncoder.Direction.RightToLeft;
            for (int i = 0; i < 10; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageDirection = EscPosEncoder.Direction.TopToBottom;
            for (int i = 0; i < 15; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 140, Y = 118, Width = 360, Height = 528 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 2 };
            EPEnc.Printables("\x0a Merry Christmas !!\x0a\x0a");

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 1 };
            EPEnc.Printables(" 10% OFF COUPON");

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 200);
            EPEnc.Printables("ESC/POS DEPARTMENT STORE");

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 50, Y = 588, Width = 72, Height = 68 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;
            EPEnc.LineSpacing = 24;

            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmastree1, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmastree2, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmastree3, false);

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 314, Y = 102, Width = 72, Height = 96 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;

            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmascake1, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmascake2, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmascake3, false);

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 276, Y = 226, Width = 70, Height = 312 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;

            EPEnc.D1BarcodeText = EscPosEncoder.HumanReadableIndicator.Below;
            EPEnc.D1BarcodeTextFontType = EscPosEncoder.FontType.B;
            EPEnc.D1BarcodeHeight = 40;
            EPEnc.D1BarcodeModuleWidth = 2;
            EPEnc.MovePrintPosition(EscPosEncoder.AxisType.Vertical, EscPosEncoder.ValueSpecifyType.Absolute, 40);
            EPEnc.D1BarcodeData = new EscPosEncoder.BarcodeData() { barcodeType = EscPosEncoder.BarcodeType.CODE39, data = Encoding.ASCII.GetBytes("*10% OFF*") };

            EPEnc.PageModeData(EscPosEncoder.PageAction.PrintAndContinue);
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 80);
            EPEnc.PageMode = false;

            //==================

            EPEnc.Initialize();
            EPEnc.PageMode = true;
            EPEnc.BasicPitch = new EscPosEncoder.MotionUnits() { horizontal = 203, vertical = 203 };

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 6, Y = 0, Width = 500, Height = 750 };

            EPEnc.PageDirection = EscPosEncoder.Direction.LeftToRight;
            for (int i = 0; i < 10; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;
            for (int i = 0; i < 15; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageDirection = EscPosEncoder.Direction.RightToLeft;
            for (int i = 0; i < 10; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageDirection = EscPosEncoder.Direction.TopToBottom;
            for (int i = 0; i < 15; i++)
            {
                EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, borderpiece, false);
            }

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 140, Y = 118, Width = 360, Height = 528 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 2 };
            EPEnc.Printables("\x0a Merry Christmas !!\x0a\x0a");

            EPEnc.CharScale = new EscPosEncoder.Scale() { width = 2, height = 1 };
            EPEnc.Printables(" 10% OFF COUPON");

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 200);
            EPEnc.Printables("ESC/POS DEPARTMENT STORE");

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 50, Y = 588, Width = 72, Height = 68 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;
            EPEnc.LineSpacing = 24;

            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmastree1, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmastree2, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmastree3, false);

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 314, Y = 102, Width = 72, Height = 96 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;

            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmascake1, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmascake2, false);
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.Immediate, xmascake3, false);

            EPEnc.PageModeArea = new System.Drawing.Rectangle { X = 276, Y = 226, Width = 70, Height = 312 };
            EPEnc.PageDirection = EscPosEncoder.Direction.BottomToTop;

            EPEnc.D1BarcodeText = EscPosEncoder.HumanReadableIndicator.Below;
            EPEnc.D1BarcodeTextFontType = EscPosEncoder.FontType.B;
            EPEnc.D1BarcodeHeight = 40;
            EPEnc.D1BarcodeModuleWidth = 2;
            EPEnc.MovePrintPosition(EscPosEncoder.AxisType.Vertical, EscPosEncoder.ValueSpecifyType.Absolute, 40);
            EPEnc.D1BarcodeData = new EscPosEncoder.BarcodeData() { barcodeType = EscPosEncoder.BarcodeType.CODE39, data = Encoding.ASCII.GetBytes("*10% OFF*") };

            EPEnc.PageModeData(EscPosEncoder.PageAction.PrintAndContinue);
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 80);
            EPEnc.PageMode = false;

            //==================

            byte[] encpagemode = EPEnc.CommandList.SelectMany(v => v.cmddata).ToArray<byte>();

            byte[] linqpagemode = pagemodeResult.SelectMany(v => v.cmddata).ToArray<byte>();

            var EPTkn = new EscPosTokenizer();
            List<EscPosCmd> escposlist = EPTkn.Scan(encpagemode, EscPosTokenizer.EscPosPrinter);
            escposlist = EscPosDecoder.Convert(escposlist);
            //FileOutList(escposlist, $"{TestContext.TestResultsDirectory}\\EncPageMode.txt");
            FileOutList(escposlist, ".\\EncPageMode.txt");

            Assert.AreEqual(pagemodeResult.Count, escposlist.Count);
            for (int i = 0; i < pagemodeResult.Count; i++)
            {
                Assert.AreEqual(pagemodeResult[i].cmdtype, escposlist[i].cmdtype);
                Assert.AreEqual(pagemodeResult[i].cmdlength, escposlist[i].cmdlength);
                for (long j = 0; j < pagemodeResult[i].cmdlength; j++)
                {
                    Assert.AreEqual(pagemodeResult[i].cmddata[j], escposlist[i].cmddata[j]);
                }
            }
        }

        public static readonly List<EscPosCmd> papercutResult = new()
        {
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x2D, 0x31, 0x2D, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x4E, 0x6F, 0x2E, 0x36 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x20, 0x4E, 0x6F, 0x2E, 0x31 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x14 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x2D, 0x31, 0x2D, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x4E, 0x6F, 0x2E, 0x36 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x20, 0x4E, 0x6F, 0x2E, 0x32 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x14 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x2D, 0x31, 0x2D, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x4E, 0x6F, 0x2E, 0x36 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x20, 0x4E, 0x6F, 0x2E, 0x33 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x14 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 }),
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x2D, 0x31, 0x2D, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x4E, 0x6F, 0x2E, 0x36 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x20, 0x4E, 0x6F, 0x2E, 0x31 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x14 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x2D, 0x31, 0x2D, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x4E, 0x6F, 0x2E, 0x36 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x20, 0x4E, 0x6F, 0x2E, 0x32 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x14 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x4E, 0x4F, 0x56, 0x2D, 0x31, 0x2D, 0x32, 0x30, 0x31, 0x32, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x30 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x4E, 0x6F, 0x2E, 0x36 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.PrtPrintables, new byte[] { 0x54, 0x4D, 0x2D, 0x55, 0x78, 0x78, 0x78, 0x20, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x20, 0x4E, 0x6F, 0x2E, 0x33 }),
            new EscPosCmd(EscPosCmdType.PrintAndLineFeed, new byte[] { 0x0A }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x14 }),
            new EscPosCmd(EscPosCmdType.EscPrintAndFeedPaper, new byte[] { 0x1B, 0x4A, 0x10 })
        };

        [TestMethod]
        public void TestMethodPaperCut()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            var EPEnc = new EscPosEncoder();
            EPEnc.Configuration(EscPosEncoder.EscPosPrinter, 1, 1, 1, 384, 1662, 437, (EscPosEncoder.InternationalCharacter)Enum.ToObject(typeof(EscPosEncoder.InternationalCharacter), 0));

            EPEnc.Initialize();

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);
            EPEnc.Printables("NOV-1-2012 13:00\x0a");
            EPEnc.Printables("Table No.6\x0a");
            EPEnc.Printables("TM-Uxxx ..... No.1\x0a");
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 20);

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);
            EPEnc.Printables("NOV-1-2012 13:00\x0a");
            EPEnc.Printables("Table No.6\x0a");
            EPEnc.Printables("TM-Uxxx ..... No.2\x0a");
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 20);

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);
            EPEnc.Printables("NOV-1-2012 13:00\x0a");
            EPEnc.Printables("Table No.6\x0a");
            EPEnc.Printables("TM-Uxxx ..... No.3\x0a");
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 20);

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);

            //==================

            EPEnc.Initialize();

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);
            EPEnc.Printables("NOV-1-2012 13:00\x0a");
            EPEnc.Printables("Table No.6\x0a");
            EPEnc.Printables("TM-Uxxx ..... No.1\x0a");
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 20);

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);
            EPEnc.Printables("NOV-1-2012 13:00\x0a");
            EPEnc.Printables("Table No.6\x0a");
            EPEnc.Printables("TM-Uxxx ..... No.2\x0a");
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 20);

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);
            EPEnc.Printables("NOV-1-2012 13:00\x0a");
            EPEnc.Printables("Table No.6\x0a");
            EPEnc.Printables("TM-Uxxx ..... No.3\x0a");
            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 20);

            EPEnc.PrintAndFeed(EscPosEncoder.FeedType.Dots, 16);

            //==================

            byte[] encpapercut = EPEnc.CommandList.SelectMany(v => v.cmddata).ToArray<byte>();

            byte[] linqpapercut = papercutResult.SelectMany(v => v.cmddata).ToArray<byte>();

            var EPTkn = new EscPosTokenizer();
            List<EscPosCmd> escposlist = EPTkn.Scan(encpapercut, EscPosTokenizer.EscPosPrinter);
            escposlist = EscPosDecoder.Convert(escposlist);
            //FileOutList(escposlist, $"{TestContext.TestResultsDirectory}\\EncPaperCut.txt");
            FileOutList(escposlist, ".\\EncPaperCut.txt");

            Assert.AreEqual(papercutResult.Count, escposlist.Count);
            for (int i = 0; i < papercutResult.Count; i++)
            {
                Assert.AreEqual(papercutResult[i].cmdtype, escposlist[i].cmdtype);
                Assert.AreEqual(papercutResult[i].cmdlength, escposlist[i].cmdlength);
                for (long j = 0; j < papercutResult[i].cmdlength; j++)
                {
                    Assert.AreEqual(papercutResult[i].cmddata[j], escposlist[i].cmddata[j]);
                }
            }
        }

        private static readonly EscPosEncoder.EscPosBitmap stampmark = new()
        {
            imageFormat = EscPosEncoder.ImageFormat.Rasters,
            width = 128,
            height = 120,
            monochrome = true,
            planeCount = 1,
            totalSize = 1921,
            planes = new EscPosEncoder.Plane[] {
                new EscPosEncoder.Plane {
                    color = (byte)'1',
                    data = new byte[] {
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xFF, 0xE3, 0xC0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x9F, 0xFF, 0xFF, 0xE7, 0xC0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x8F, 0xFF, 0xFF, 0xC7, 0xC0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xCF, 0xFF, 0xFF, 0xCF, 0xC0, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC7, 0xFF, 0xFF, 0x8F, 0x80, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0xFF, 0xFF, 0x1F, 0x80, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF1, 0xFF, 0xFE, 0x3F, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0xFF, 0xFC, 0x7E, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x7F, 0xF8, 0xFE, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x3F, 0xF1, 0xF8, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x0F, 0xC3, 0xF0, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x07, 0xE0, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x0F, 0xC0, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0x80, 0x00, 0x01,
                        0x80, 0x3E, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x3F, 0x00, 0x00, 0x01,
                        0x80, 0x3E, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x7E, 0x00, 0x00, 0x01,
                        0x80, 0x7F, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01,
                        0x80, 0xFF, 0x80, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01,
                        0x81, 0xEF, 0xC0, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01,
                        0x87, 0xC3, 0xC0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01,
                        0x87, 0x81, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01,
                        0x87, 0x81, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01,
                        0x87, 0xC0, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01,
                        0x87, 0xE0, 0x7C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01,
                        0x81, 0xF0, 0x3C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01,
                        0x80, 0xFC, 0x0E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01,
                        0x80, 0x7E, 0x3C, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01,
                        0x80, 0x1F, 0x7C, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x7F, 0x00, 0x00, 0x01,
                        0x80, 0x1F, 0x7C, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x3F, 0xC0, 0x00, 0x01,
                        0x80, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x3F, 0xF0, 0x00, 0x01,
                        0x80, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x1F, 0xF8, 0x00, 0x01,
                        0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x07, 0xFC, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x01, 0xFE, 0x00, 0x01,
                        0x9F, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x7E, 0x00, 0x01,
                        0x9F, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x3E, 0x00, 0x01,
                        0x9F, 0xC0, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x1E, 0x00, 0x01,
                        0x9F, 0xFC, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x1E, 0x00, 0x01,
                        0x87, 0xFF, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01,
                        0x80, 0x7F, 0xF1, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01,
                        0x80, 0x0F, 0xF1, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01,
                        0x80, 0x0F, 0xF1, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01,
                        0x80, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xEF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xE7, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xC3, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xC3, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF0, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF8, 0x03, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
                    }
                }
            }
        };

        public static readonly List<EscPosCmd> nvgraphicsResult = new()
        {
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.GsDefineWindowsBMPNVGraphicsData, new byte[] { 0x1D, 0x44, 0x30, 0x43, 0x30, 0x47, 0x31, 0x30, 0x31, 0x42, 0x4D, 0xBE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x13, 0x0B, 0x00, 0x00, 0x13, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0xE0, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x07, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x3F, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x3F, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0xFF, 0xFF, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x7F, 0xFF, 0xC0, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x3F, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x3F, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x3F, 0xFF, 0x80, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x0F, 0xFF, 0x80, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x0F, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x0F, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x01, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x3C, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x3C, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x18, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x10, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xF0, 0x0E, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x7F, 0xF0, 0x0E, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x7F, 0x80, 0x0E, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x78, 0x00, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x60, 0x03, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xE1, 0xFF, 0xFE, 0x60, 0x3F, 0xFF, 0xC0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xE1, 0xFF, 0xFE, 0x60, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x0F, 0xFF, 0xFF, 0xC1, 0xFF, 0xFE, 0x60, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x07, 0xFF, 0xFF, 0x81, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0xFF, 0xFE, 0x01, 0xFF, 0xFE, 0x7F, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x7F, 0xF8, 0x03, 0xFF, 0xFE, 0x7F, 0xFC, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x1F, 0xE0, 0x07, 0xFF, 0xFE, 0x7F, 0xF0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x0F, 0xC0, 0x0F, 0xFF, 0xFE, 0x7F, 0xE0, 0x83, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xC0, 0x3F, 0xFF, 0xFE, 0x7F, 0xE0, 0x83, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x07, 0x80, 0xFF, 0xFF, 0xFE, 0x7F, 0x81, 0xC3, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x83, 0xFF, 0xFF, 0xFE, 0x7F, 0x03, 0xF1, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0xFE, 0x7E, 0x0F, 0xC3, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0xFE, 0x78, 0x1F, 0x83, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0xFE, 0x78, 0x3F, 0x07, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0xFE, 0x78, 0x7E, 0x0F, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0xFE, 0x78, 0x7E, 0x0F, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0xFE, 0x78, 0x3C, 0x3F, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0xFE, 0x7E, 0x10, 0x3F, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x83, 0xFF, 0xFF, 0xFE, 0x7F, 0x00, 0x7F, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x83, 0xFF, 0xFF, 0xFE, 0x7F, 0x80, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x83, 0xFF, 0xFF, 0xFE, 0x7F, 0xC1, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x07, 0x81, 0xFF, 0xFF, 0xFE, 0x7F, 0xC1, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x0F, 0xC0, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F, 0xE0, 0x7F, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x3F, 0xF0, 0x3F, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x7F, 0xF8, 0x1F, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xF0, 0x3C, 0x0F, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0xC0, 0x0E, 0x07, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x03, 0x80, 0x07, 0x01, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x07, 0x00, 0x03, 0x81, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x0E, 0x00, 0x01, 0xC0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1C, 0x00, 0x00, 0xE0, 0x7F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x38, 0x00, 0x00, 0x70, 0x7F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x30, 0x00, 0x00, 0x30, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x70, 0x00, 0x00, 0x38, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x60, 0x00, 0x00, 0x18, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0x00, 0x00, 0x1C, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0x00, 0x00, 0x0C, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0x00, 0x00, 0x0C, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0x00, 0x00, 0x0C, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0x00, 0x00, 0x0C, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x00, 0x00, 0x0E, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
            new EscPosCmd(EscPosCmdType.GsPrintSpecifiedNVGraphicsData, new byte[] { 0x1D, 0x28, 0x4C, 0x06, 0x00, 0x30, 0x45, 0x47, 0x31, 0x01, 0x01 }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x00 }),
            new EscPosCmd(EscPosCmdType.EscInitialize, new byte[] { 0x1B, 0x40 }),
            new EscPosCmd(EscPosCmdType.GsDefineNVGraphicsDataRasterW, new byte[] { 0x1D, 0x28, 0x4C, 0x8B, 0x07, 0x30, 0x43, 0x30, 0x47, 0x31, 0x01, 0x80, 0x00, 0x78, 0x00, 0x31, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0xFF, 0xFF, 0xF1, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xFF, 0xFF, 0xF3, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xFF, 0xE3, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x9F, 0xFF, 0xFF, 0xE7, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x8F, 0xFF, 0xFF, 0xC7, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xCF, 0xFF, 0xFF, 0xCF, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC7, 0xFF, 0xFF, 0x8F, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0xFF, 0xFF, 0x1F, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF1, 0xFF, 0xFE, 0x3F, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0xFF, 0xFC, 0x7E, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x7F, 0xF8, 0xFE, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x3F, 0xF1, 0xF8, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x0F, 0xC3, 0xF0, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x07, 0xE0, 0x00, 0x01, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x0F, 0xC0, 0x00, 0x01, 0x80, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0x80, 0x00, 0x01, 0x80, 0x3E, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x3F, 0x00, 0x00, 0x01, 0x80, 0x3E, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x7E, 0x00, 0x00, 0x01, 0x80, 0x7F, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01, 0x80, 0xFF, 0x80, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01, 0x81, 0xEF, 0xC0, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01, 0x87, 0xC3, 0xC0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01, 0x87, 0x81, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01, 0x87, 0x81, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01, 0x87, 0xC0, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01, 0x87, 0xE0, 0x7C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01, 0x81, 0xF0, 0x3C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01, 0x80, 0xFC, 0x0E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x01, 0x80, 0x7E, 0x3C, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x01, 0x80, 0x1F, 0x7C, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x7F, 0x00, 0x00, 0x01, 0x80, 0x1F, 0x7C, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x3F, 0xC0, 0x00, 0x01, 0x80, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x3F, 0xF0, 0x00, 0x01, 0x80, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x1F, 0xF8, 0x00, 0x01, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x07, 0xFC, 0x00, 0x01, 0x80, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x01, 0xFE, 0x00, 0x01, 0x9F, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x7E, 0x00, 0x01, 0x9F, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x3E, 0x00, 0x01, 0x9F, 0xC0, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x1E, 0x00, 0x01, 0x9F, 0xFC, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x1E, 0x00, 0x01, 0x87, 0xFF, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01, 0x80, 0x7F, 0xF1, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01, 0x80, 0x0F, 0xF1, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01, 0x80, 0x0F, 0xF1, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x01, 0x80, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xEF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xE7, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xC3, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xC3, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF0, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF8, 0x03, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }),
            new EscPosCmd(EscPosCmdType.GsPrintSpecifiedNVGraphicsData, new byte[] { 0x1D, 0x28, 0x4C, 0x06, 0x00, 0x30, 0x45, 0x47, 0x31, 0x01, 0x01 }),
            new EscPosCmd(EscPosCmdType.GsPaperFeedAndPartialCut, new byte[] { 0x1D, 0x56, 0x42, 0x00 })
        };

        [TestMethod]
        public void TestMethodnvgraphics()
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            var EPEnc = new EscPosEncoder();
            EPEnc.Configuration(EscPosEncoder.EscPosPrinter, 1, 1, 1, 384, 1662, 437, (EscPosEncoder.InternationalCharacter)Enum.ToObject(typeof(EscPosEncoder.InternationalCharacter), 0));

            EPEnc.Initialize();

            //System.Drawing.Image image = System.Drawing.Image.FromFile("RevStamp.bmp");
            //EscPosEncoder.EscPosBitmap RevStamp = (EscPosEncoder.EscPosBitmap)EPEnc.ConvertEscPosBitmap(image, EscPosEncoder.ImageFormat.Rasters, 0, 0, EscPosEncoder.DithererType.None);
            //EPEnc.DefineGraphics(EscPosEncoder.BufferType.NVGraphics, RevStamp, true, 1, 1, (byte)'G', (byte)'1');
            System.Reflection.Assembly asm = System.Reflection.Assembly.GetExecutingAssembly();
            EscPosEncoder.EscPosBitmap data = new();
            data.imageFormat = EscPosEncoder.ImageFormat.WindowsBMP;
            data.planeCount = 1;
            using (MemoryStream ms = new(Properties.Resources.StampMark))
            {
                data.planes = new EscPosEncoder.Plane[] { new EscPosEncoder.Plane() { color = 0x31, data = ms.ToArray() } };
                data.totalSize = data.planes[0].data.Length + 1;
                using Bitmap bitmap = new(ms);
                data.width = bitmap.Width;
                data.height = bitmap.Height;
                data.monochrome = (bitmap.PixelFormat == PixelFormat.Format1bppIndexed);
            }
            EPEnc.DefineGraphics(EscPosEncoder.BufferType.NVGraphics, data, true, 1, 1, (byte)'G', (byte)'1');

            EPEnc.PrintGraphics(EscPosEncoder.BufferType.NVGraphics, 1, 1, (byte)'G', (byte)'1');

            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 0);

            //==================

            EPEnc.Initialize();

            EPEnc.DefineGraphics(EscPosEncoder.BufferType.NVGraphics, stampmark, true, 1, 1, (byte)'G', (byte)'1');

            EPEnc.PrintGraphics(EscPosEncoder.BufferType.NVGraphics, 1, 1, (byte)'G', (byte)'1');

            EPEnc.CutPaper(EscPosEncoder.CutType.FeedAndPartialCut, 0);

            //==================

            byte[] encnvgraphics = EPEnc.CommandList.SelectMany(v => v.cmddata).ToArray<byte>();

            byte[] linqnvgraphics = nvgraphicsResult.SelectMany(v => v.cmddata).ToArray<byte>();

            var EPTkn = new EscPosTokenizer();
            List<EscPosCmd> escposlist = EPTkn.Scan(encnvgraphics, EscPosTokenizer.EscPosPrinter);
            escposlist = EscPosDecoder.Convert(escposlist);
            //FileOutList(escposlist, $"{TestContext.TestResultsDirectory}\\EncNVGraphics.txt");
            FileOutList(escposlist, ".\\EncNVGraphics.txt");

            Assert.AreEqual(nvgraphicsResult.Count, escposlist.Count);
            for (int i = 0; i < nvgraphicsResult.Count; i++)
            {
                Assert.AreEqual(nvgraphicsResult[i].cmdtype, escposlist[i].cmdtype);
                Assert.AreEqual(nvgraphicsResult[i].cmdlength, escposlist[i].cmdlength);
                for (long j = 0; j < nvgraphicsResult[i].cmdlength; j++)
                {
                    Assert.AreEqual(nvgraphicsResult[i].cmddata[j], escposlist[i].cmddata[j]);
                }
            }
        }
    }
}